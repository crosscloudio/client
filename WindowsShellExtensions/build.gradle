buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {

        classpath 'org.jclarion:image4j:0.7',
                'org.apache.xmlgraphics:batik-transcoder:1.8',
                'org.apache.xmlgraphics:batik-dom:1.8',
                'org.apache.xmlgraphics:batik-anim:1.8',
                'org.apache.xmlgraphics:xmlgraphics-commons:2.1',
                'commons-io:commons-io:2.4'


    }
}



import org.apache.batik.transcoder.TranscoderException
import org.apache.batik.transcoder.TranscoderInput
import org.apache.batik.transcoder.TranscoderOutput
import org.apache.batik.transcoder.TranscodingHints
import org.apache.batik.transcoder.image.ImageTranscoder
import org.apache.commons.io.FileUtils
import org.apache.batik.anim.dom.SVGDOMImplementation;
import org.apache.batik.util.SVGConstants

import net.sf.image4j.codec.ico.ICOEncoder
import java.awt.image.BufferedImage


task generateIco << {

    //org.apache.batik.transcoder.
//net.sf.image4j.codec.ico.ICOEncoder
    def files = ['src/CCShellExtContextMenuHandler/resources/synced.svg',
             'src/CCShellExtContextMenuHandler/resources/unsynced.svg']
    for (file in files) {
        List<BufferedImage> images = new LinkedList<>();
        def resolutions = [16, 24, 32, 48, 64, 128, 256]
        def image = new File(file)
        for (res in resolutions) {
            def bufimg = rasterize(image, res, res)
            images.add(bufimg)
        }
       // def outFile = new File()
        def newname = image.name.replace('.svg', '.ico')
        def outFile = new File(image.getParent(), newname )
        ICOEncoder.write(images, outFile)
    }
    //ImageIO.write(bufimg, "png", new File('src/CCShellExtContextMenuHandler/resources/test.png'));
    //net.sf.image4j.codec.bmp.BMPEncoder.write(bufimg, new File('src/CCShellExtContextMenuHandler/resources/test.bmp'))

}

BufferedImage rasterize(File svgFile, float width, float heigth) throws IOException {

    final BufferedImage[] imagePointer = new BufferedImage[1];

    // Rendering hints can't be set programatically, so
    // we override defaults with a temporary stylesheet.
    // These defaults emphasize quality and precision, and
    // are more similar to the defaults of other SVG viewers.
    // SVG documents can still override these defaults.
    String css = "svg {" +
            "shape-rendering: geometricPrecision;" +
            "text-rendering:  geometricPrecision;" +
            "color-rendering: optimizeQuality;" +
            "image-rendering: optimizeQuality;" +
            "}";
    File cssFile = File.createTempFile("batik-default-override-", ".css");
    FileUtils.writeStringToFile(cssFile, css);

    TranscodingHints transcoderHints = new TranscodingHints();
    transcoderHints.put(ImageTranscoder.KEY_XML_PARSER_VALIDATING, Boolean.FALSE);
    transcoderHints.put(ImageTranscoder.KEY_DOM_IMPLEMENTATION,
            SVGDOMImplementation.getDOMImplementation());
    transcoderHints.put(ImageTranscoder.KEY_DOCUMENT_ELEMENT_NAMESPACE_URI,
            SVGConstants.SVG_NAMESPACE_URI);
    transcoderHints.put(ImageTranscoder.KEY_DOCUMENT_ELEMENT, "svg");
    transcoderHints.put(ImageTranscoder.KEY_USER_STYLESHEET_URI, cssFile.toURI().toString());

    transcoderHints.put(ImageTranscoder.KEY_WIDTH, new Float(width));
    transcoderHints.put(ImageTranscoder.KEY_HEIGHT, new Float(heigth));


    try {

        TranscoderInput input = new TranscoderInput(new FileInputStream(svgFile));

        ImageTranscoder t = new ImageTranscoder() {

            @Override
            public BufferedImage createImage(int w, int h) {
                return new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
            }

            @Override
            public void writeImage(BufferedImage image, TranscoderOutput out)
                    throws TranscoderException {
                imagePointer[0] = image;
            }
        };
        t.setTranscodingHints(transcoderHints);
        t.transcode(input, null);
    }
    catch (TranscoderException ex) {
        // Requires Java 6
        ex.printStackTrace();
        throw new IOException("Couldn't convert " + svgFile);
    }
    finally {
        cssFile.delete();
    }

    return imagePointer[0];
}
